import os
from time import sleep
from util import validate_year
from multiverso import Multiverse

# Descripci√≥n: Clase que maneja la interfaz de usuario en consola
# Atributos:
#   - multiverse: Instancia de la clase Multiverso para an√°lisis de datos
class Menu:
    def __init__(self):
        self.multiverse = Multiverse('anomalias_multiverso_test.xlsx')
        
    # Descripci√≥n: Limpia la pantalla de la consola
    # Entrada: No requiere par√°metros
    # Proceso: Ejecuta el comando de limpieza seg√∫n el sistema operativo
    # Salida: No retorna valor, efecto visual en consola
    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')
        
    # Descripci√≥n: Muestra el encabezado decorativo del programa
    # Entrada: No requiere par√°metros
    # Proceso: Imprime t√≠tulo y versi√≥n con formato decorativo
    # Salida: No retorna valor, imprime en consola
    def show_header(self):
        print("\n" + "="*50)
        print("üåå SISTEMA PROTECTORES DEL C√ìDIGO üåå".center(50))
        print("An√°lisis del Multiverso v1.0".center(50))
        print("="*50 + "\n")
        
    # Descripci√≥n: Muestra las opciones disponibles del men√∫
    # Entrada: No requiere par√°metros
    # Proceso: Imprime lista numerada de opciones
    # Salida: No retorna valor, imprime en consola
    def show_menu(self):
        print("\nOPCIONES DISPONIBLES:")
        print("1. Cargar datos del multiverso")
        print("2. Filtrar eventos por a√±o")
        print("3. Clasificar eventos temporalmente")
        print("4. Ver c√≥digo de error m√°s com√∫n")
        print("5. Analizar niveles de afectaci√≥n")
        print("6. Identificar dimensi√≥n de mayor riesgo")
        print("7. Calcular estabilidad del multiverso")
        print("8. Exportar datos procesados")
        print("9. Salir")
        
    # Descripci√≥n: Pausa la ejecuci√≥n hasta que el usuario presione Enter
    # Entrada: No requiere par√°metros
    # Proceso: Espera input del usuario
    # Salida: No retorna valor, pausa la ejecuci√≥n
    def wait_enter(self):
        input("\nPresione Enter para continuar...")
        
    # Descripci√≥n: Ejecuta el bucle principal del programa
    # Entrada: No requiere par√°metros
    # Proceso: 
    #   1. Muestra men√∫ y opciones
    #   2. Procesa selecci√≥n del usuario
    #   3. Ejecuta la funcionalidad correspondiente
    #   4. Repite hasta que usuario seleccione salir
    # Salida: No retorna valor, controla flujo del programa
    def run(self):
        while True:
            self.clear_screen()
            self.show_header()
            self.show_menu()
            
            option = input("\nSeleccione una opci√≥n (1-9): ")
            
            self.clear_screen()
            self.show_header()
            
            if option == "1":
                if self.multiverse.load_data():
                    print("\n‚úÖ Datos cargados exitosamente!")
                else:
                    print("\n‚ùå Error al cargar los datos.")
                    
            elif option == "2":
                if self.multiverse.df is None:
                    print("\n‚ùå Error: Primero debe cargar los datos (opci√≥n 1)")
                else:
                    year = input("\nIngrese el a√±o de referencia: ")
                    valid, year_int = validate_year(year)
                    if valid:
                        results = self.multiverse.filter_by_year(year_int)
                        print(f"\nResultados del filtrado para el a√±o {year_int}:")
                        print(f"- Eventos anteriores: {results['previous']}")
                        print(f"- Eventos posteriores: {results['next']}")
                        print(f"- Eventos del a√±o exacto: {results['exact']}")
                        
            elif option == "3":
                if self.multiverse.year_reference is None:
                    print("\n‚ùå Error: Primero debe filtrar por a√±o (opci√≥n 2)")
                else:
                    if self.multiverse.classify_events():
                        print("\n‚úÖ Eventos clasificados exitosamente!")
                        
            elif option == "4":
                if self.multiverse.df is None:
                    print("\n‚ùå Error: Primero debe cargar los datos (opci√≥n 1)")
                else:
                    code = self.multiverse.most_common_error()
                    print(f"\nEl c√≥digo de error m√°s com√∫n es: {code}")
                    
            elif option == "5":
                if self.multiverse.df is None:
                    print("\n‚ùå Error: Primero debe cargar los datos (opci√≥n 1)")
                else:
                    results = self.multiverse.analyze_affectation()
                    print("\nAn√°lisis de niveles de afectaci√≥n:")
                    print(f"- Bajo impacto (1-30): {results['low_impact']}")
                    print(f"- Afectaci√≥n moderada (31-70): {results['moderate_impact']}")
                    print(f"- Alta corrupci√≥n (71-100): {results['high_impact']}")
                    
            elif option == "6":
                if self.multiverse.df is None:
                    print("\n‚ùå Error: Primero debe cargar los datos (opci√≥n 1)")
                else:
                    dimension = self.multiverse.highest_risk_dimension()
                    print(f"\nLa dimensi√≥n con mayor riesgo es: {dimension}")
                    
            elif option == "7":
                if self.multiverse.df is None:
                    print("\n‚ùå Error: Primero debe cargar los datos (opci√≥n 1)")
                else:
                    score, message = self.multiverse.calculate_stability()
                    print(f"\nPuntaje de estabilidad: {score}")
                    print(f"Estado del multiverso: {message}")
                    
            elif option == "8":
                if self.multiverse.df is None:
                    print("\n‚ùå Error: Primero debe cargar los datos (opci√≥n 1)")
                else:
                    if self.multiverse.export_data():
                        print("\n‚úÖ Datos exportados exitosamente!")
                        
            elif option == "9":
                print("\n¬°Gracias por usar el Sistema Protectores del C√≥digo!")
                print("Cerrando programa", end="")
                for _ in range(3):
                    sleep(0.5)
                    print(".", end="", flush=True)
                print()
                break
                
            else:
                print("\n‚ùå Opci√≥n inv√°lida. Por favor, seleccione una opci√≥n v√°lida (1-9)")
                
            self.wait_enter()
